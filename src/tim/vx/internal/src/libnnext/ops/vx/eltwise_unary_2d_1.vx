#include "cl_viv_vx_ext.h"

_viv_uniform float alpha;
_viv_uniform float beta;

float4 eltwise_unary_sin(float4 x)
{
    return native_sin(x);
}

float4 eltwise_unary_cos(float4 x)
{
    return native_cos(x);
}

#define logE        (1.44269502f)
#define twoLogE     (logE * 2.0f)
float4 eltwise_unary_exp(float4 x)
{
    x *= logE;
    x = exp2(x);
    return x;
}

#define rlogE    (0.693147182f)
float4 eltwise_unary_log(float4 x)
{
    x = log2(x);
    return x * rlogE;
}

float4 eltwise_unary_neg(float4 x)
{
    return x * -1;
}

float4 eltwise_unary_selu(float4 val)
{
    float4 x = val * logE;
    x = exp2(x) * alpha - alpha;

    return val < 0 ? x : val * beta;
}

float4 eltwise_unary_celu(float4 val)
{
    float4 x = val * logE * beta;
    x = exp2(x) * alpha - alpha;

    return val < 0 ? x : val;
}

float4 eltwise_unary_rcp(float4 val)
{
    return 1.0f / val;
}

float4 eltwise_unary_sign(float4 val)
{
    return sign(val);
}

float4 eltwise_unary_softsign(float4 val)
{
    float4 _rcp = 1.0f / (1.0f + fabs(val));
    return val * _rcp;
}

float4 eltwise_unary_atan(float4 val)
{
    return atan(val);
}

float4 eltwise_unary_atanh(float4 val)
{
    return atanh(val);
}

float4 eltwise_unary_acosh(float4 val)
{
    return acosh(val);
}

_viv_uniform float inputScale;
_viv_uniform float inputTail;
_viv_uniform float outputScale;
_viv_uniform float outputZP;
_viv_uniform VXC_512Bits uniExtract8Data_2x8;
_viv_uniform VXC_512Bits uniDatatoFp32Part0_4x4;
_viv_uniform VXC_512Bits uniDatatoFp32Part1_4x4;

#define ELTSISE_UNARY_2D(func_name, src_type_name, dst_type_name, src_type, \
        src_copy_type, convert_type, dst_type, dst_copy_type) \
    __kernel void func_name##_##src_type_name##to##dst_type_name##_2D( \
    __read_only  image2d_array_t  input, \
    __write_only image2d_array_t  output, \
                 int              type, \
                 float            _alpha, \
                 float            _beta \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    src_type      src0; \
    src_copy_type src1; \
    VXC_ReadImage(src0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, src0, 16); \
 \
    float4 vecA; \
    float4 vecB; \
    VXC_DP4x4(vecA, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDatatoFp32Part0_4x4); \
    VXC_DP4x4(vecB, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDatatoFp32Part1_4x4); \
    vecA = vecA * inputScale + inputTail; \
    vecB = vecB * inputScale + inputTail; \
    vecA = eltwise_unary_##func_name(vecA); \
    vecB = eltwise_unary_##func_name(vecB); \
    vecA = vecA * outputScale + outputZP; \
    vecB = vecB * outputScale + outputZP; \
 \
    convert_type dst0, dst1; \
    _viv_asm(CONV_RTE, dst0, vecA); \
    _viv_asm(CONV_RTE, dst1, vecB); \
    dst_type dst2; \
    VXC_DP2x8(dst2, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniExtract8Data_2x8); \
    dst_copy_type dst; \
    _viv_asm(COPY, dst, dst2, 16); \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}

_viv_uniform VXC_512Bits uniConvBF16toF32_Part0_2x8;
_viv_uniform VXC_512Bits uniConvBF16toF32_Part1_2x8;
_viv_uniform VXC_512Bits uniExtractOddData_2x8;

#define ELTSISE_UNARY_BF16_2D(func_name) \
    __kernel void func_name##_BF16toBF16_2D( \
    __read_only  image2d_array_t  input, \
    __write_only image2d_array_t  output, \
                 int              type, \
                 float            _alpha, \
                 float            _beta \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    vxc_ushort8   src0, src1, dst; \
    VXC_ReadImage(src0, input, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    float4 vecA; \
    float4 vecB; \
    vxc_short8 zero = (vxc_short8)(0, 0, 0, 0, 0, 0, 0, 0); \
    VXC_DP2x8(src1, src0, zero, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvBF16toF32_Part0_2x8); \
    _viv_asm(COPY, vecA, src1, 16); \
    VXC_DP2x8(src1, src0, zero, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvBF16toF32_Part1_2x8); \
    _viv_asm(COPY, vecB, src1, 16); \
    vecA = eltwise_unary_##func_name(vecA); \
    vecB = eltwise_unary_##func_name(vecB); \
 \
    _viv_asm(COPY, src0, vecA, 16); \
    _viv_asm(COPY, src1, vecB, 16); \
 \
    VXC_DP2x8(dst, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniExtractOddData_2x8); \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
#define ADD_ELTSISE_UNARY_2D(func_name) \
ELTSISE_UNARY_2D(func_name, F16, F16, vxc_short8, vxc_half8,  half4, vxc_half8,  vxc_short8) \
ELTSISE_UNARY_2D(func_name, F16, I8,  vxc_short8, vxc_half8,  int4,  vxc_char8,  vxc_char8) \
ELTSISE_UNARY_2D(func_name, F16, U8,  vxc_short8, vxc_half8,  int4,  vxc_uchar8, vxc_uchar8) \
ELTSISE_UNARY_2D(func_name, F16, I16, vxc_short8, vxc_half8,  int4,  vxc_short8, vxc_short8) \
ELTSISE_UNARY_2D(func_name, I8,  I8,  vxc_char8,  vxc_char8,  int4,  vxc_char8,  vxc_char8) \
ELTSISE_UNARY_2D(func_name, I8,  F16, vxc_char8,  vxc_char8,  half4, vxc_half8,  vxc_short8) \
ELTSISE_UNARY_2D(func_name, U8,  U8,  vxc_uchar8, vxc_uchar8, int4,  vxc_uchar8, vxc_uchar8) \
ELTSISE_UNARY_2D(func_name, U8,  F16, vxc_uchar8, vxc_uchar8, half4, vxc_half8,  vxc_short8) \
ELTSISE_UNARY_2D(func_name, I16, I16, vxc_short8, vxc_short8, int4,  vxc_short8, vxc_short8) \
ELTSISE_UNARY_2D(func_name, I16, F16, vxc_short8, vxc_short8, half4, vxc_half8,  vxc_short8) \
ELTSISE_UNARY_BF16_2D(func_name)

//EXP
ADD_ELTSISE_UNARY_2D(exp)
//SIN
ADD_ELTSISE_UNARY_2D(sin)
//COS
ADD_ELTSISE_UNARY_2D(cos)
//LOG
ADD_ELTSISE_UNARY_2D(log)
//SELU
ADD_ELTSISE_UNARY_2D(selu)
//NEG
ADD_ELTSISE_UNARY_2D(neg)
//CELU
ADD_ELTSISE_UNARY_2D(celu)
//RCP
ADD_ELTSISE_UNARY_2D(rcp)
//SIGN
ADD_ELTSISE_UNARY_2D(sign)
//SOFTSIGN
ADD_ELTSISE_UNARY_2D(softsign)
//ATAN
ADD_ELTSISE_UNARY_2D(atan)
//ATANH
ADD_ELTSISE_UNARY_2D(atanh)
//ACOSH
ADD_ELTSISE_UNARY_2D(acosh)

