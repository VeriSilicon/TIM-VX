#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniFp16SumSqr_dp8x2;
_viv_uniform int width;

_viv_uniform int height;

_viv_uniform int height_depth;
_viv_uniform float dimRatio;
_viv_uniform int group_num;
_viv_uniform VXC_512Bits UniFP16toFP32Lo4_dp4x4;
_viv_uniform VXC_512Bits uniConvertSecFp16Fp32_4x4;
_viv_uniform VXC_512Bits uniConvertHalfToFp16_2x8;
_viv_uniform VXC_512Bits uniConvertInt32toUint8_2x8;
_viv_uniform float outputScale;
_viv_uniform float output_zp;

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void layernorm_wh_sumSqr_F16toF32(
    image2d_array_t input, image2d_t output)
{
    int gidx = get_global_id(0) << 3;
    int lidx = get_local_id(0);
    int gidz = get_global_id(1);
    int4 coord = (int4)(gidx, 0, gidz, 0);
    vxc_short8 src0;
    vxc_half8 in_h;
    vxc_float4 sumsqr;
    vxc_float4 tmpSumSqr = (vxc_float4)(0);

    __local float lcl_sum[16];
    __local float lcl_sqr[16];

    int8 input_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr_a = (int)coord.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord.w, baseAddr_a);

    if(gidx < width)
    {
        for(coord.y = 0; coord.y < height;)
        {
            VXC_OP4(img_load_3d, src0, input, coord.xywz, VXC_5BITOFFSET_XY(0, 0),
                    VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
            coord.y++;
            _viv_asm(COPY, in_h, src0, 16);
            VXC_DP8x2(sumsqr, in_h, in_h, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0),\
                uniFp16SumSqr_dp8x2);
            tmpSumSqr += sumsqr;
        }
    }

    lcl_sum[lidx] = tmpSumSqr.x;
    lcl_sqr[lidx] = tmpSumSqr.y;
    barrier(CLK_LOCAL_MEM_FENCE);

    int2 coord_out = (int2)(get_group_id(0) << 2, gidz);
    if(lidx == 0)
    {
        float4 one = (float4)(1, 1, 1, 1);
        __local float4* tmp_sum = (__local float4*)lcl_sum;
        __local float4* tmp_sqr = (__local float4*)lcl_sqr;

        float sum = 0;
        float sqr = 0;
        for(int i = 0; i < 4; i++)
        {
            sum += dot(tmp_sum[i], one);
            sqr += dot(tmp_sqr[i], one);
        }

        float4 data = (float4)(sum, sqr, 0, 0);
        write_imagef(output, coord_out, data);
    }
}

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void layernorm_wh_sumSqr_F16toF32_2D(
    image2d_array_t input, image2d_t output)
{
    int gidx = get_global_id(0) << 3;
    int lidx = get_local_id(0);
    int gidz = get_global_id(1);
    int gidy = gidz * height;

    int2 coord = (int2)(gidx, gidy);
    vxc_short8 src0;
    vxc_half8 in_h;
    vxc_float4 sumsqr;
    vxc_float4 tmpSumSqr = (vxc_float4)(0);

    __local float lcl_sum[16];
    __local float lcl_sqr[16];

    int endH = gidy + height;
    if(gidx < width)
    {
        for(; coord.y < endH;)
        {
            VXC_ReadImage(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
            coord.y++;
            _viv_asm(COPY, in_h, src0, 16);
            VXC_DP8x2(sumsqr, in_h, in_h, VXC_MODIFIER(0, 1, 0, VXC_RM_TowardZero, 0),\
                uniFp16SumSqr_dp8x2);
            tmpSumSqr += sumsqr;
        }
    }

    lcl_sum[lidx] = tmpSumSqr.x;
    lcl_sqr[lidx] = tmpSumSqr.y;
    barrier(CLK_LOCAL_MEM_FENCE);

    int2 coord_out = (int2)(get_group_id(0) << 2, gidz);
    if(lidx == 0)
    {
        float4 one = (float4)(1, 1, 1, 1);
        __local float4* tmp_sum = (__local float4*)lcl_sum;
        __local float4* tmp_sqr = (__local float4*)lcl_sqr;

        float sum = 0;
        float sqr = 0;
        for(int i = 0; i < 4; i++)
        {
            sum += dot(tmp_sum[i], one);
            sqr += dot(tmp_sqr[i], one);
        }

        float4 data = (float4)(sum, sqr, 0, 0);
        write_imagef(output, coord_out, data);
    }
}

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void layernorm_wh_F16toF16(
    image2d_array_t input, image2d_array_t bias, image2d_array_t scale, image2d_t meanVari,
    image2d_array_t output, float eps)
{
    int gidz = get_global_id(1);
    int4 coord = (int4)(get_global_id(0), 0, gidz, gidz);
    int4 coord_in = (int4)(get_global_id(0), 0, gidz, gidz);
    int2 coord_sum = (int2)(0, gidz);
    int4 coord_para = coord;
    coord_para.z = (ushort)gidz / (ushort)(height_depth);
    vxc_short8 src0;
    vxc_short8 src1;
    vxc_half8 scale_h, in_h;
    vxc_float4 bias_f0, bias_f1, scale_f0, scale_f1;
    vxc_float4 mean_vari = (vxc_float4)(0);

    for(int i = 0; i < group_num; i++)
    {
        mean_vari += read_imagef(meanVari, coord_sum);
        coord_sum.x += 4;
    }
    mean_vari *= dimRatio;
    mean_vari.s1 = mean_vari.s1 - mean_vari.s0 * mean_vari.s0 + eps;
    mean_vari.s1 = rsqrt(mean_vari.s1);

    int4 coord_bias = coord_para;

    int8 input_desc, scale_desc, output_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr_a = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.z, baseAddr_a);

    _viv_asm(COPY, scale_desc, scale, sizeof(scale_desc));
    int baseAddr_c = (int)coord_para.z * scale_desc.s4 + scale_desc.s0;
    _viv_asm(MOV, coord_para.w, baseAddr_c);

    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    int baseAddr = (int)coord.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord.z, baseAddr);

    vxc_float4  tmpData0, tmpData1;
    vxc_short8 outval;
    half4 tmpVal0, tmpVal1;
    vxc_half8 dst;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        VXC_OP4(img_load_3d, src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0),
                            VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        coord_in.y ++;
        coord_para.y = coord.y;
        coord_bias.y = coord.y;
        VXC_OP4(img_load_3d, src1, scale, coord_para.xywz, VXC_5BITOFFSET_XY(0, 0),
                        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        bias_f0 = read_imagef(bias, coord_bias);
        coord_bias.x += 4;
        bias_f1 = read_imagef(bias, coord_bias);
        coord_bias.x = coord.x;

        _viv_asm(COPY, in_h, src0, 16);
        VXC_DP4x4(tmpData0, in_h, in_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            UniFP16toFP32Lo4_dp4x4);
        VXC_DP4x4(tmpData1, in_h, in_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertSecFp16Fp32_4x4);

        _viv_asm(COPY, scale_h, src1, 16);
        VXC_DP4x4(scale_f0, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                UniFP16toFP32Lo4_dp4x4);
        VXC_DP4x4(scale_f1, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertSecFp16Fp32_4x4);

        vxc_float4 sub, norm;
        sub = tmpData0 - mean_vari.s0;
        norm = scale_f0 * mean_vari.s1 * sub + bias_f0;
        _viv_asm(CONV, tmpVal0, norm);
        sub = tmpData1 - mean_vari.s0;
        norm = scale_f1 * mean_vari.s1 * sub + bias_f1;
        _viv_asm(CONV, tmpVal1, norm);
        VXC_DP2x8(dst, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
                    uniConvertHalfToFp16_2x8);
        _viv_asm(COPY, outval, dst, 16);
        VXC_OP4_NoDest(img_store_3d, output, coord, outval, \
                VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    }
}

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void layernorm_wh_F16toF16_2D(
    image2d_t input, image2d_t bias, image2d_t scale, image2d_t meanVari,
    image2d_t output, float eps)
{
    int2 coord = (int2)(get_global_id(0), 0);
    int2 coord_bias = (int2)(0, 0);
    vxc_short8 src0;
    vxc_short8 src1;
    vxc_half8 scale_h, in_h;
    vxc_float4 bias_f0, bias_f1, scale_f0, scale_f1;
    vxc_float4 mean_vari = (vxc_float4)(0);

    for(int i = 0; i < group_num; i++)
    {
        mean_vari += read_imagef(meanVari, coord_bias);
        coord_bias.x += 4;
    }
    mean_vari *= dimRatio;
    mean_vari.s1 = mean_vari.s1 - mean_vari.s0 * mean_vari.s0 + eps;
    mean_vari.s1 = rsqrt(mean_vari.s1);

    coord_bias = coord;

    vxc_float4  tmpData0, tmpData1;
    vxc_short8 outval;
    half4 tmpVal0, tmpVal1;
    vxc_half8 dst;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        VXC_ReadImage(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),\
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        coord_bias.y = coord.y;
        VXC_ReadImage(src1, scale, coord, VXC_5BITOFFSET_XY(0, 0),\
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        bias_f0 = read_imagef(bias, coord_bias);
        coord_bias.x += 4;
        bias_f1 = read_imagef(bias, coord_bias);
        coord_bias.x = coord.x;

        _viv_asm(COPY, in_h, src0, 16);
        VXC_DP4x4(tmpData0, in_h, in_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            UniFP16toFP32Lo4_dp4x4);
        VXC_DP4x4(tmpData1, in_h, in_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertSecFp16Fp32_4x4);

        _viv_asm(COPY, scale_h, src1, 16);
        VXC_DP4x4(scale_f0, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                UniFP16toFP32Lo4_dp4x4);
        VXC_DP4x4(scale_f1, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertSecFp16Fp32_4x4);

        vxc_float4 sub, norm;
        sub = tmpData0 - mean_vari.s0;
        norm = scale_f0 * mean_vari.s1 * sub + bias_f0;
        _viv_asm(CONV, tmpVal0, norm);
        sub = tmpData1 - mean_vari.s0;
        norm = scale_f1 * mean_vari.s1 * sub + bias_f1;
        _viv_asm(CONV, tmpVal1, norm);
        VXC_DP2x8(dst, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0),\
                    uniConvertHalfToFp16_2x8);
        _viv_asm(COPY, outval, dst, 16);
        VXC_WriteImage(output, coord, outval, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    }
}

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void layernorm_wh_F16toU8(
    image2d_array_t input, image2d_array_t bias, image2d_array_t scale, image2d_t meanVari,
    image2d_array_t output, float eps)
{
    int gidz = get_global_id(1);
    int4 coord = (int4)(get_global_id(0), 0, gidz, gidz);
    int4 coord_in = (int4)(get_global_id(0), 0, gidz, gidz);
    int2 coord_sum = (int2)(0, gidz);
    int4 coord_para = coord;
    coord_para.z = (ushort)gidz / (ushort)(height_depth);
    vxc_short8 src0;
    vxc_short8 src1;
    vxc_half8 scale_h, in_h;
    vxc_float4 bias_f0, bias_f1, scale_f0, scale_f1;
    vxc_float4 mean_vari = (vxc_float4)(0);

    for(int i = 0; i < group_num; i++)
    {
        mean_vari += read_imagef(meanVari, coord_sum);
        coord_sum.x += 4;
    }
    mean_vari *= dimRatio;
    mean_vari.s1 = mean_vari.s1 - mean_vari.s0 * mean_vari.s0 + eps;
    mean_vari.s1 = rsqrt(mean_vari.s1);

    int4 coord_bias = coord_para;

    int8 input_desc, scale_desc, output_desc;
    _viv_asm(COPY, input_desc, input, sizeof(input_desc));
    int baseAddr_a = (int)coord_in.z * input_desc.s4 + input_desc.s0;
    _viv_asm(MOV, coord_in.z, baseAddr_a);

    _viv_asm(COPY, scale_desc, scale, sizeof(scale_desc));
    int baseAddr_c = (int)coord_para.z * scale_desc.s4 + scale_desc.s0;
    _viv_asm(MOV, coord_para.w, baseAddr_c);

    _viv_asm(COPY, output_desc, output, sizeof(output_desc));
    int baseAddr = (int)coord.z * output_desc.s4 + output_desc.s0;
    _viv_asm(MOV, coord.z, baseAddr);

    vxc_float4  tmpData0, tmpData1;
    vxc_uchar16 outval;
    vxc_int4 tmpVal0, tmpVal1;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        VXC_OP4(img_load_3d, src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0),
                            VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        coord_in.y ++;
        coord_para.y = coord.y;
        coord_bias.y = coord.y;
        VXC_OP4(img_load_3d, src1, scale, coord_para.xywz, VXC_5BITOFFSET_XY(0, 0),
                        VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        bias_f0 = read_imagef(bias, coord_bias);
        coord_bias.x += 4;
        bias_f1 = read_imagef(bias, coord_bias);
        coord_bias.x = coord.x;

        _viv_asm(COPY, in_h, src0, 16);
        VXC_DP4x4(tmpData0, in_h, in_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            UniFP16toFP32Lo4_dp4x4);
        VXC_DP4x4(tmpData1, in_h, in_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertSecFp16Fp32_4x4);

        _viv_asm(COPY, scale_h, src1, 16);
        VXC_DP4x4(scale_f0, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                UniFP16toFP32Lo4_dp4x4);
        VXC_DP4x4(scale_f1, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertSecFp16Fp32_4x4);

        vxc_float4 sub, norm;
        sub = tmpData0 - mean_vari.s0;
        norm = scale_f0 * mean_vari.s1 * sub + bias_f0;
        tmpVal0 = convert_int4_rte(norm * outputScale + output_zp);
        sub = tmpData1 - mean_vari.s0;
        norm = scale_f1 * mean_vari.s1 * sub + bias_f1;
        tmpVal1 = convert_int4_rte(norm * outputScale + output_zp);
        VXC_DP2x8(outval, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),\
                uniConvertInt32toUint8_2x8);
        VXC_OP4_NoDest(img_store_3d, output, coord, outval, \
                VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    }
}

__kernel __attribute__((reqd_work_group_size(16, 1, 1))) void layernorm_wh_F16toU8_2D(
    image2d_t input, image2d_t bias, image2d_t scale, image2d_t meanVari,
    image2d_t output, float eps)
{
    int2 coord = (int2)(get_global_id(0), 0);
    int2 coord_bias = (int2)(0, 0);
    vxc_short8 src0;
    vxc_short8 src1;
    vxc_half8 scale_h, in_h;
    vxc_float4 bias_f0, bias_f1, scale_f0, scale_f1;
    vxc_float4 mean_vari = (vxc_float4)(0);

    for(int i = 0; i < group_num; i++)
    {
        mean_vari += read_imagef(meanVari, coord_bias);
        coord_bias.x += 4;
    }
    mean_vari *= dimRatio;
    mean_vari.s1 = mean_vari.s1 - mean_vari.s0 * mean_vari.s0 + eps;
    mean_vari.s1 = rsqrt(mean_vari.s1);

    coord_bias = coord;

    vxc_float4  tmpData0, tmpData1;
    vxc_uchar16 outval;
    vxc_int4 tmpVal0, tmpVal1;

    for(coord.y = 0; coord.y < height; coord.y++)
    {
        VXC_ReadImage(src0, input, coord, VXC_5BITOFFSET_XY(0, 0),\
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        coord_bias.y = coord.y;
        VXC_ReadImage(src1, scale, coord, VXC_5BITOFFSET_XY(0, 0),\
                VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        bias_f0 = read_imagef(bias, coord_bias);
        coord_bias.x += 4;
        bias_f1 = read_imagef(bias, coord_bias);
        coord_bias.x = coord.x;

        _viv_asm(COPY, in_h, src0, 16);
        VXC_DP4x4(tmpData0, in_h, in_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            UniFP16toFP32Lo4_dp4x4);
        VXC_DP4x4(tmpData1, in_h, in_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
            uniConvertSecFp16Fp32_4x4);

        _viv_asm(COPY, scale_h, src1, 16);
        VXC_DP4x4(scale_f0, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                UniFP16toFP32Lo4_dp4x4);
        VXC_DP4x4(scale_f1, scale_h, scale_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0),\
                uniConvertSecFp16Fp32_4x4);

        vxc_float4 sub, norm;
        sub = tmpData0 - mean_vari.s0;
        norm = scale_f0 * mean_vari.s1 * sub + bias_f0;
        tmpVal0 = convert_int4_rte(norm * outputScale + output_zp);
        sub = tmpData1 - mean_vari.s0;
        norm = scale_f1 * mean_vari.s1 * sub + bias_f1;
        tmpVal1 = convert_int4_rte(norm * outputScale + output_zp);
        VXC_DP2x8(outval, tmpVal0, tmpVal1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1),\
                uniConvertInt32toUint8_2x8);
        VXC_WriteImage(output, coord, outval, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    }
}