#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniConvBF16toF32_Part0_2x8;
_viv_uniform VXC_512Bits uniExtractOddData_2x8;

_viv_uniform float logE;
_viv_uniform float twoLogE;
_viv_uniform float forget_bias;
float4 sigmoid(float4 x)
{
    x *= -logE;
    x = 1 + exp2(x);
    return 1 / x;
}
float4 hard_sigmoid(float4 x)
{
    x = 0.2 * x + 0.5;
    x = clamp(x, 0, 1);
    return x;
}
float4 tangentH(float4 x)
{
    x *= -twoLogE;
    x = 1 + exp2(x);
    x = 1 / x;
    return 2 * x - 1;
}
_viv_uniform float outputScale;
_viv_uniform float outputZP;
_viv_uniform float4 clip_Min_F;
_viv_uniform float4 clip_Max_F;

#define LSTMUNIT_L_BF16(act_name, act_func) \
__kernel void lstmunit_activation_L_BF16toBF16_BF16_##act_name( \
    __read_only  image2d_array_t  input_i_conv, \
    __read_only  image2d_array_t  input_f_conv, \
    __read_only  image2d_array_t  input_c_conv, \
    __read_only  image2d_array_t  input_o_conv, \
    __read_only  image2d_t        cell_state_in, \
    __read_only  image2d_t        bias_i, \
    __read_only  image2d_t        bias_f, \
    __read_only  image2d_t        bias_c, \
    __read_only  image2d_t        bias_o, \
    __read_only  image2d_t        layer_norm_wi, \
    __read_only  image2d_t        layer_norm_wf, \
    __read_only  image2d_t        layer_norm_wc, \
    __read_only  image2d_t        layer_norm_wo, \
    __write_only image2d_array_t  output, \
    __write_only image2d_t        cell_state_out, \
    __write_only image2d_t        h_state_out, \
    int _is_ln, int _is_cifg, int _is_hybrid, float cell_clip, float forgetBias \
    ) \
{ \
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0); \
    vxc_short8 vect0, vect1, vect2, vect3, vect4, data0, data1; \
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t; \
    float4 w0, w1, w2, w3, b0, b1, b2, b3; \
    VXC_ReadImage(vect0, input_i_conv, coord_in.xy, 0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(vect1, input_f_conv, coord_in.xy, 0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(vect2, input_c_conv, coord_in.xy, 0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(vect3, input_o_conv, coord_in.xy, 0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(vect4, cell_state_in, coord_in.xy, 0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    w0 = read_imagef(layer_norm_wi, coord_in.xw); \
    w1 = read_imagef(layer_norm_wf, coord_in.xw); \
    w2 = read_imagef(layer_norm_wc, coord_in.xw); \
    w3 = read_imagef(layer_norm_wo, coord_in.xw); \
    b0 = read_imagef(bias_i, coord_in.xw); \
    b1 = read_imagef(bias_f, coord_in.xw); \
    b2 = read_imagef(bias_c, coord_in.xw); \
    b3 = read_imagef(bias_o, coord_in.xw); \
    vxc_short8 zero = (vxc_short8)(0, 0, 0, 0, 0, 0, 0, 0); \
    VXC_DP2x8(data0, vect0, zero, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), \
                        uniConvBF16toF32_Part0_2x8); \
    _viv_asm(COPY, data_i_t, data0, 16); \
    VXC_DP2x8(data1, vect1, zero, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), \
                        uniConvBF16toF32_Part0_2x8); \
    _viv_asm(COPY, data_f_t, data1, 16); \
    VXC_DP2x8(data0, vect2, zero, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), \
                        uniConvBF16toF32_Part0_2x8); \
    _viv_asm(COPY, data_g_t, data0, 16); \
    VXC_DP2x8(data1, vect3, zero, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), \
                        uniConvBF16toF32_Part0_2x8); \
    _viv_asm(COPY, data_o_t, data1, 16); \
    VXC_DP2x8(data0, vect4, zero, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), \
                        uniConvBF16toF32_Part0_2x8); \
    _viv_asm(COPY, data_c_t, data0, 16); \
 \
    data_i_t = data_i_t * w0 + b0; \
    data_f_t = data_f_t * w1 + b1; \
    data_g_t = data_g_t * w2 + b2; \
    data_o_t = data_o_t * w3 + b3; \
 \
    data_i_t = act_func(data_i_t); \
    data_f_t = act_func(data_f_t + forget_bias); \
    data_g_t = tangentH(data_g_t); \
    data_i_t = data_i_t * data_g_t; \
    data_c_t = data_c_t * data_f_t + data_i_t; \
    data_c_t = data_c_t > clip_Max_F ? clip_Max_F : data_c_t; \
    data_c_t = data_c_t < clip_Min_F ? clip_Min_F : data_c_t; \
    _viv_asm(COPY, vect0, data_c_t, 16); \
    VXC_DP2x8(data0, vect0, vect0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniExtractOddData_2x8); \
    VXC_WriteImage(cell_state_out, coord_in.zy, data0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    data_o_t = act_func(data_o_t); \
    data_c_t = tangentH(data_c_t); \
    data_o_t = data_o_t * data_c_t * outputScale + outputZP; \
    _viv_asm(COPY, vect1, data_o_t, 16); \
    VXC_DP2x8(data1, vect1, vect1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniExtractOddData_2x8); \
    VXC_WriteImage(output, coord_in.zy, data1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
    VXC_WriteImage(h_state_out, coord_in.zy, data1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0)); \
}
LSTMUNIT_L_BF16(SIGMOID, sigmoid)
LSTMUNIT_L_BF16(HARD_SIGMOID, hard_sigmoid)
